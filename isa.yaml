tokens:
  label_re: r'(?P<label>\w+)?\s*:?\s*'
  memonic_re: r'(?P<memonic>\w+)\s+'
  rz_re: r'(?P<rz>\w+)\s*,\s*'
  rx_re: r'(?P<rx>\w+)\s*,\s*'
  ry_or_kk_re: r'(?P<kk>\d+)?(?P<ry>\w+)?'
  offset_re: r'?\[?(?P<offset>\d+)?\]?'
instructions:
  RR: &RR
    opcode: 0x0
    print: '{i[memonic]} {i[rz]} {i[rx]} {i[ry]}'
    format:
      - [ry,[13,3]]
      - [rx,[10,3]]
      - [function,[7,3]]
      - [rz,[4,3]]
      - [opcode,[1,2]]
  RI: &RI
    opcode: 0x1
    print: '{i[memonic]} {i[rz]} {i[rx]} {i[kk]}'
    format:
      - [kk, [15, 5]]
      - [rx,[10,3]]
      - [function,[7,3]]
      - [rz,[4,3]]
      - [opcode,[1,2]]
  ADD:
    <<: *RR
    function: 0x0
  SUB:
    <<: *RR
    function: 0x1
  AND:
    <<: *RR
    function: 0x2
  OR:
    <<: *RR
    function: 0x3
  SLT:
    <<: *RR
    function: 0x4
  LOAD:
    <<: *RI
    function: 0x0
  STOR:
    <<: *RI
    function: 0x1
  ADDI:
    <<: *RI
    function: 0x2
  LUI:
    <<: *RI
    function: 0x3
  JAL:
    opcode: 0x2
    print: '{i[memonic]} {i[rz]} {i[kk]}'
    format:
      - [kk, [15,11]]
      - [rz,[4,3]]
      - [opcode,[1,2]]
  BEQ:
    opcode: 0x3
    print: '{i[memonic]} {i[rx]} {i[ry]} {i[kk]}'
    format:
      - [kk, [7,6], [15,2]]
      - [ry,[13,3]]
      - [rx,[10,3]]
      - [opcode,[1,2]]
registers:
  zero: 0
  r0: 0
  r1: 1
  r2: 2
  r3: 3
  r4: 4
  r5: 5
  r6: 6